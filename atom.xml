<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XU-YH&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/284becbaec717fc6c2d36bfec766bb1e</icon>
  <subtitle>醒醒，起床敲代码了！！！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xuyinhui.com/"/>
  <updated>2018-09-27T14:28:07.267Z</updated>
  <id>http://blog.xuyinhui.com/</id>
  
  <author>
    <name>XU-YH</name>
    <email>xuyinhui163@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git的使用</title>
    <link href="http://blog.xuyinhui.com/2018/09/27/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.xuyinhui.com/2018/09/27/git的使用/</id>
    <published>2018-09-27T12:52:20.000Z</published>
    <updated>2018-09-27T14:28:07.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;<strong>Git</strong>是分布式版本控制系统，<strong>CVS</strong>及<strong>SVN</strong>都是集中式的版本控制系统。<br>&emsp;&emsp;集中式版本控制系统，版本库（代码）是集中存放在中央服务器的，工作时，用的都是自己的电脑，所以每个人要先从中央服务器取得最新的版本，然后开始工作，工作结束后，再把自己的代码推送给中央服务器。<br>&emsp;&emsp;分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br>&emsp;&emsp;两个有什么不同呢？<br>&emsp;&emsp;<strong>分布式版本控制系统（Git）相较于集中式版本控制系统SVN，<code>Git</code>不需要联网，速度快，安全性高，一旦<code>SVN</code>的中央服务器挂了，所有人都收到了影响，而且<code>Git</code>拥有极其强大的分支管理</strong></p><h2 id="常用到的git命令"><a href="#常用到的git命令" class="headerlink" title="常用到的git命令"></a>常用到的git命令</h2><p>&emsp;&emsp;以下是博主常用到的一些git命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 通过git init命令把这个目录变成Git可以管理的仓库</span><br><span class="line">$ git init</span><br><span class="line">// 显示仓库的当前状态</span><br><span class="line">// 如果git status告诉你有文件被修改过，用git diff命令可以查看修改内容。</span><br><span class="line">$ git status</span><br><span class="line">// 与远程仓库相关联</span><br><span class="line">$ git remote add origin git@github.com:XU-YH/(项目名).git</span><br><span class="line">$ git pull --rebase origin master</span><br><span class="line">// * 代表所有文件</span><br><span class="line">$ git add * </span><br><span class="line">$ git commit -m &quot;add distributed&quot;</span><br><span class="line">$ git pull</span><br><span class="line">$ git push origin branch-name</span><br></pre></td></tr></table></figure><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//显示从最近到最远的提交日志</span><br><span class="line">$ git log</span><br><span class="line">//看到的一大串类似3628164...882e1e0的是commit_id（版本号）（十六进制）</span><br><span class="line">//简化信息</span><br><span class="line">$ git log --pretty=oneline</span><br><span class="line">//回退到上一个版本</span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line">//指定回到某个版本，根据版本号找，版本号没必要写全，前几位就可以了</span><br><span class="line">//HEAD指向哪个版本号，你就把当前版本定位在哪</span><br><span class="line">$ git reset --hard commit_id</span><br><span class="line">//查看命令历史，以便确定要回到哪个版本</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><hr><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-27/git1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p><strong>管理修改：Git管理的是修改</strong></p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><hr><p>&emsp;&emsp;文件已修改，未add到暂存区:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 让这个文件回到最近一次git commit或git add时的状态</span><br><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;文件已修改，并add到暂存区未commit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file </span><br><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;文件已修改，并add到暂存区且commit：<br>版本回退吧</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//rm命令删除文件</span><br><span class="line">$ rm test.txt</span><br><span class="line">//删除版本库里的文件</span><br><span class="line">$ git rm test.txt</span><br><span class="line">//删错了文件，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本</span><br><span class="line">$ git checkout -- test.txt</span><br><span class="line">//git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</span><br></pre></td></tr></table></figure><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><hr><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-27/git2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p>&emsp;&emsp;在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。<br>&emsp;&emsp;截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<strong>master</strong>分支。<strong>HEAD</strong>严格来说不是指向提交，而是指向<strong>master</strong>，<strong>master</strong>才是指向提交的，所以，<strong>HEAD</strong>指向的就是当前分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line">（当前分支前面会标一个*号）</span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><hr><p><strong>master</strong>分支和<strong>feature1</strong>分支各自都分别有新的提交，这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br></pre></td></tr></table></figure><p><strong>存在冲突，必须手动解决冲突后再提交</strong></p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><hr><p>&emsp;&emsp;通常，合并分支时，如果可能，Git会用<strong>Fast forward</strong>模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用<strong>Fast forward</strong>模式，Git就会在<strong>merge</strong>时生成一个新的<strong>commit</strong>，这样，从分支历史上就可以看出分支信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">//修改readme.txt文件</span><br><span class="line">$ git add readme.txt</span><br><span class="line">$ git commit -m &quot;add merge&quot;</span><br><span class="line">$ git checkout master</span><br><span class="line">//合并dev分支，请注意--no-ff参数，表示禁用Fast forward：</span><br><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><hr><p>&emsp;&emsp;软件开发中，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。<br>&emsp;&emsp;当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（新文件修改后，要先add到stage中，然后再stash)</span><br><span class="line">$ git stash</span><br><span class="line">$ git checkout master</span><br><span class="line">现在就可以去修改Bug了</span><br><span class="line">改好了</span><br><span class="line">$ git checkout dev</span><br><span class="line">$ git stash list（查看）</span><br><span class="line">Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</span><br><span class="line">一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；</span><br><span class="line">另一种方式是用git stash pop，恢复的同时把stash内容也删了</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><hr><p>&emsp;&emsp;开发一个新<code>feature</code>(实验性质的代码)，最好新建一个分支；<br>&emsp;&emsp;如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除，如果分支中没有添加新的数据（空的文件）是可以通过<code>git branch -d &lt;name&gt;</code>删除</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><hr><p>&emsp;&emsp;A：首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；<br>&emsp;&emsp;B：如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；<br>&emsp;&emsp;C：如果合并有冲突，则解决冲突，并在本地提交；<br>&emsp;&emsp;D：没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！<br>&emsp;&emsp;E：如果<code>git pull</code>提示<strong>“no tracking information”</strong>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>$ git branch --set-upstream-to=origin/branch-name</code>。</p><p>&emsp;&emsp;查看远程库信息，使用<code>git remote -v</code>；<br>&emsp;&emsp;本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>&emsp;&emsp;你的小伙伴要在<strong>dev</strong>分支上开发，就必须创建远程<strong>origin</strong>的<strong>dev</strong>分支到本地，于是他用这个命令创建本地<strong>dev</strong>分支：<code>$ git checkout -b branch-name origin/branch-name</code></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;这是2017年初次学习git时参照<strong>廖雪峰</strong>老师的博客整理出的学习笔记，学习git命令，常用的命令也不多，博主现在使用<strong>github</strong>提供的pc客户端使用的多，命令行不经常敲就会忘 <strong>-_-</strong>，<a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub for Windows</a>客户端也非常的好用，也推荐大家使用。</p><hr><p>参考文章地址：</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a> </li><li><a href="https://blog.csdn.net/fox9916/article/details/78253714?locationNum=5&amp;fps=1" target="_blank" rel="noopener">git本地项目代码上传至码云远程仓库总结</a> </li><li><a href="https://blog.csdn.net/lindexi_gd/article/details/52554159" target="_blank" rel="noopener">git无法pull仓库refusing to merge unrelated histories</a> </li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;Git&lt;/strong&gt;是分布式版本控制系统，&lt;strong&gt;CVS&lt;/strong&gt;及&lt;stron
      
    
    </summary>
    
      <category term="study" scheme="http://blog.xuyinhui.com/categories/study/"/>
    
    
      <category term="git" scheme="http://blog.xuyinhui.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>八达岭长城游记</title>
    <link href="http://blog.xuyinhui.com/2018/09/09/%E5%85%AB%E8%BE%BE%E5%B2%AD%E9%95%BF%E5%9F%8E%E6%B8%B8%E8%AE%B0/"/>
    <id>http://blog.xuyinhui.com/2018/09/09/八达岭长城游记/</id>
    <published>2018-09-09T09:48:59.000Z</published>
    <updated>2018-09-10T12:21:58.392Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909182622.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">长城</font></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>&emsp;&emsp;转眼间，已经来北京两个月了，一直想去各大景点转转，碍于天气原因，北京真的热，晒得慌。最终决定在这个周六自己宿舍加上旁边宿舍的小伙伴们一起爬长城，嘟嘟嘟。</p><h2 id="登城前"><a href="#登城前" class="headerlink" title="登城前"></a>登城前</h2><hr><p>&emsp;&emsp;原计划八点出发，然而计划就是被用来打破的，，，八点十五出发，十二个人坐公交车。换乘第二班公交车（877路）遇到第一个坑，在站台等车，许多小车围了上来，载客，各种劝说。最后公交车来了，这个坑没往下跳。<br>&emsp;&emsp;在公交车上已经能看到长城了，依山势而建，内心还是很兴奋的，然而我晕车，要吐，表示很难受。到达八达岭站后，在小姐姐的解说（糊弄？）下买了门票和往返的滑车票，一共140，这时候已经入坑了。然后开始登城，嘟嘟嘟~</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909183307.jpg" alt="登城" title="">                </div>                <div class="image-caption">登城</div>            </figure></div></p><p align="center"><font color="gray">开始登城</font></p><p>&emsp;&emsp;进入长城前的黑熊，都懒洋洋的，圈养的动物。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909183258.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">胖乎乎的熊</font></p><p>&emsp;&emsp;坐滑车，呃呃呃，这不是我想象中的滑车</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909180956.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">滑车</font></p><h2 id="登城中"><a href="#登城中" class="headerlink" title="登城中"></a>登城中</h2><hr><p>&emsp;&emsp;最大的感受是好陡啊，有的台阶高低不一样，极易踩空，而且很多是没有台阶的，几百年前的人，士兵，是怎么在这上面保卫国家的呢，不易啊。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180910001835.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">爬啊爬啊</font></p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180910000909.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">爬啊爬啊</font></p><p>&emsp;&emsp;长城上的蜘蛛，在这山上，它吃什么呢？它一个蛛孤单吗？</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909184046.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">蜘蛛</font></p><p>&emsp;&emsp;长城上不热，就是很晒，相当晒，感谢这多云朵带来几分钟的阴凉。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909184109.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">云朵</font></p><p>&emsp;&emsp;北十楼是跑着到的，当时快喘不上气，空气又非常干燥，坐在烽火台里喘会气。坐在那里你都能感觉到腿在发抖，&gt;-&lt;</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909184551.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">北十楼</font></p><p>&emsp;&emsp;大家停下来休息，吃零食，吃午饭，爬累了，爬饿了。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909182632.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">小伙伴</font></p><p>&emsp;&emsp;最后一楼，北十二。可以回去了。- \/ -</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909182611.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">北十二楼</font></p><h2 id="登城后"><a href="#登城后" class="headerlink" title="登城后"></a>登城后</h2><hr><p>&emsp;&emsp;从北十一楼下了长城，大家纷纷表示腿疼。出出口就可以看到卖纪念品的，进去逛了逛。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180910004046.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">纪念礼品店</font></p><p>&emsp;&emsp;第二个坑，被所谓的志愿指导小姐姐忽悠卖了门票加滑车往返票。北四楼坐滑车上去，北十一就有下去的出口，谁会为了渣渣滑车往回走呢？直接下去比往回走近多了，退滑车票只退20。而且，北一楼售票处是单买门票的，从北四楼入口走去北一楼入口只要二十分钟，开始骗我们在山的另一边，要走两个小时，呜呜呜。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909181626.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">售票处</font></p><p>&emsp;&emsp;饿了，小镇上的肉夹馍，有点干。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909181304.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">肉夹馍</font></p><p>&emsp;&emsp;本人了。</p><p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/GreatWall/20180909232151.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></div></p><p align="center"><font color="gray">me</font></p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><hr><p>&emsp;&emsp;有些地方是值得去看一遍的。<br>&emsp;&emsp;站在长城上除了看到长城，还能看到翻山越岭的高压电线和高速公路火车，这是现代社会的奇迹，然而长城的历史可以追溯到两千多年前的秦始皇，时代不断变迁，如今的八达岭长城是几百年前的明清长城遗址经过修缮后的，但是这只是万里长城中的一段，可想当年，真正的万里长城，连绵起伏，气势磅礴，佩服古人，靠人力在险峻的山峰上修建长城，在长城上站岗巡视保卫国家，这是一个名族的骄傲。<br>&emsp;&emsp;旅游规划好，多看攻略，别再被坑了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/d
      
    
    </summary>
    
      <category term="life" scheme="http://blog.xuyinhui.com/categories/life/"/>
    
    
      <category term="旅游" scheme="http://blog.xuyinhui.com/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="北京" scheme="http://blog.xuyinhui.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="长城" scheme="http://blog.xuyinhui.com/tags/%E9%95%BF%E5%9F%8E/"/>
    
  </entry>
  
  <entry>
    <title>使用七牛云存储搭建图床</title>
    <link href="http://blog.xuyinhui.com/2018/09/07/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>http://blog.xuyinhui.com/2018/09/07/使用七牛云存储搭建图床/</id>
    <published>2018-09-07T08:22:47.000Z</published>
    <updated>2018-09-07T12:37:50.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要图床"><a href="#为什么需要图床" class="headerlink" title="为什么需要图床"></a>为什么需要图床</h2><p>&emsp;&emsp;使用<code>markdown</code>写文章，注重的是文章的文字和排版，但是有时难免会用到图片，如果是别的站点的图片，可能源站点设置图片的防盗链，而且源站点删除了图片，自己就遭殃了，如果是自己的图片，上传到自己购买的服务器上，还不如第三方图床，速度和功能上第三方都进行过升级优化。</p><h2 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h2><p>&emsp;&emsp;七牛云官方地址：<a href="https://portal.qiniu.com" target="_blank" rel="noopener">https://portal.qiniu.com</a><br>&emsp;&emsp;官网注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云时国内专业CDN服务商，插件支持比较多，图片上传无限制。</p><h2 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h2><p>&emsp;&emsp;注册实名认证后，前往主页，进入对象存储，完成下面步骤</p><h3 id="新建存储空间"><a href="#新建存储空间" class="headerlink" title="新建存储空间"></a>新建存储空间</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/72777135.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/75532150.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/22820629.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/97337815.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="复制外链"><a href="#复制外链" class="headerlink" title="复制外链"></a>复制外链</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/12187724.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;得到的外链粘贴到浏览器的地址栏，可以直接获取到图片</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/5180497.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;这样就可以在<code>md</code>文章上插入图片了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片外链)</span><br></pre></td></tr></table></figure><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>&emsp;&emsp;新建存储空间七牛云提供一个测试域名，测试域名自创建起 30 个自然日后系统会自动回收，所以需要绑定一个自己的域名。长久之计。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/76826539.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>&emsp;&emsp;推荐绑定二级域名，配置域名解析CNAME，按指示走。博主配置的二级域名<code>image.XXX.com</code></p><h2 id="极简图床"><a href="#极简图床" class="headerlink" title="极简图床"></a>极简图床</h2><p>&emsp;&emsp;七牛云上传文件，一个一个的上传有点麻烦，在这里推荐使用<a href="http://jiantuku.com" target="_blank" rel="noopener">极简图床</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://image.xuyinhui.com/18-9-7/4923001.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么需要图床&quot;&gt;&lt;a href=&quot;#为什么需要图床&quot; class=&quot;headerlink&quot; title=&quot;为什么需要图床&quot;&gt;&lt;/a&gt;为什么需要图床&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用&lt;code&gt;markdown&lt;/code&gt;写文章，注重的是文章的文字和排
      
    
    </summary>
    
      <category term="study" scheme="http://blog.xuyinhui.com/categories/study/"/>
    
    
      <category term="markdown" scheme="http://blog.xuyinhui.com/tags/markdown/"/>
    
      <category term="图床" scheme="http://blog.xuyinhui.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>解决ajax跨域请求问题</title>
    <link href="http://blog.xuyinhui.com/2018/09/06/%E8%A7%A3%E5%86%B3ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.xuyinhui.com/2018/09/06/解决ajax跨域请求问题/</id>
    <published>2018-09-06T13:19:26.000Z</published>
    <updated>2018-09-21T16:57:41.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域问题"><a href="#什么是跨域问题" class="headerlink" title="什么是跨域问题"></a>什么是跨域问题</h2><p>&emsp;&emsp;跨域问题来源于<code>JavaScript</code>的同源策略（same-origin policy），即只有 <strong>协议</strong>+<strong>主机名</strong>+<strong>端口号</strong> (如存在)相同，则允许相互访问。也就是说<code>JavaScript</code>只能访问和操作自己域下的资源，不能访问和操作其他域下的资源，同源策略用于保证用户信息安全，防止恶意的网站窃取数据。跨域问题是针对<code>JS</code>和<code>ajax</code>的，<code>html</code>本身没有跨域问题，比如<code>a</code>标签、<code>script</code>标签、甚至<code>form</code>标签（可以直接跨域发送数据并接收数据）等 。<br>&emsp;&emsp;下面举几个例子：</p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://www.123.com/index.html 调用 http://www.123.com/server.php （非跨域）</span><br><span class="line">http://www.123.com/index.html 调用 http://www.456.com/server.php （主域名不同:123/456，跨域）</span><br><span class="line">http://abc.123.com/index.html 调用 http://def.123.com/server.php （子域名不同:abc/def，跨域）</span><br><span class="line">http://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （端口不同:8080/8081，跨域）</span><br><span class="line">http://www.123.com/index.html 调用 https://www.123.com/server.php （协议不同:http/https，跨域）</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>localhost和127.0.0.1虽然都指向本机，但也属于跨域，主机名不同。</p><h2 id="解决ajax跨域问题的三种方法"><a href="#解决ajax跨域问题的三种方法" class="headerlink" title="解决ajax跨域问题的三种方法"></a>解决ajax跨域问题的三种方法</h2><h3 id="方法一：XHR2"><a href="#方法一：XHR2" class="headerlink" title="方法一：XHR2"></a>方法一：XHR2</h3><p>&emsp;&emsp;此种方法是<strong>HTML5</strong>的新功能，对<code>post</code>请求和<code>get</code>请求都有用，博主就是使用此种方法解决了跨域问题，在服务器端添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许所有来源访问</span></span><br><span class="line">response.addHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"><span class="comment">// 允许访问的方式</span></span><br><span class="line">addHeader(<span class="string">"Access-Control-Allow-Method:POST,GET"</span>);</span><br></pre></td></tr></table></figure><h3 id="方法二：JSONP"><a href="#方法二：JSONP" class="headerlink" title="方法二：JSONP"></a>方法二：JSONP</h3><p><strong>注意：此种方法只对get请求有用</strong></p><p>&emsp;&emsp;<strong>Jsonp的原理：</strong><br>1.<code>jsonp</code>通过<code>script</code>标签的<code>src</code>可以跨域请求的特性，加载资源<br>2.将加载的资源（通过一个方法名将数据进行包裹）当做是<code>js</code>脚本解析<br>3.定义一个回调函数，获取传入的数据</p><p>html前端代码：</p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$.ajax(</span><br><span class="line">    &#123;</span><br><span class="line">        type:'get',</span><br><span class="line">        url : 'http://www.youxiaju.com/validate.php?loginuser=lee&amp;loginpass=123456',</span><br><span class="line">        dataType : 'jsonp',</span><br><span class="line">        jsonp:"jsoncallback",</span><br><span class="line">        success  : function(data) &#123;</span><br><span class="line">            alert("用户名："+ data.user +" 密码："+ data.pass);</span><br><span class="line">        &#125;,</span><br><span class="line">        error : function() &#123;</span><br><span class="line">            alert('fail');</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-Type:text/html;Charset=utf-8'</span>);</span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">"user"</span> =&gt; $_GET[<span class="string">'loginuser'</span>],</span><br><span class="line"><span class="string">"pass"</span> =&gt; $_GET[<span class="string">'loginpass'</span>],</span><br><span class="line"><span class="string">"name"</span> =&gt; <span class="string">'response'</span></span><br><span class="line"> </span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'jsoncallback'</span>] . <span class="string">"("</span>.json_encode($arr).<span class="string">")"</span>;</span><br></pre></td></tr></table></figure><h3 id="方法三：代理"><a href="#方法三：代理" class="headerlink" title="方法三：代理"></a>方法三：代理</h3><p>&emsp;&emsp;通过<strong>A</strong>后台(ASP、PHP、JAVA、ASP.NET)获取<strong>B</strong>其他域名下的数据，然后再把<strong>A</strong>获得数据返回到前端，这样因为在<strong>A</strong>和<strong>前端</strong>同一个域名下，所以就不会出现跨域的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;<strong>代理</strong>实现最麻烦，但使用最广泛，任何支持AJAX的浏览器都可以使用这种方式。<br>&emsp;&emsp;<strong>JSONP</strong>相对简单，但只支持get请求调用。<br>&emsp;&emsp;<strong>XHR2</strong>最简单，但只支持HTML5，如果是移动端开发，可以选择使用XHR2。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是跨域问题&quot;&gt;&lt;a href=&quot;#什么是跨域问题&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域问题&quot;&gt;&lt;/a&gt;什么是跨域问题&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;跨域问题来源于&lt;code&gt;JavaScript&lt;/code&gt;的同源策略（sa
      
    
    </summary>
    
      <category term="study" scheme="http://blog.xuyinhui.com/categories/study/"/>
    
    
      <category term="jQuery" scheme="http://blog.xuyinhui.com/tags/jQuery/"/>
    
      <category term="html" scheme="http://blog.xuyinhui.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>解决Tomcat中get请求和post请求中文乱码问题</title>
    <link href="http://blog.xuyinhui.com/2018/08/26/%E8%A7%A3%E5%86%B3get%E5%92%8Cpost%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.xuyinhui.com/2018/08/26/解决get和post中文乱码问题/</id>
    <published>2018-08-26T09:11:52.000Z</published>
    <updated>2018-09-27T14:34:05.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="乱码原因"><a href="#乱码原因" class="headerlink" title="乱码原因"></a>乱码原因</h2><p>对于国内的程序员来说，在做项目时避免不了的问题是中文乱码问题。<strong>Tomcat7</strong>及其以下版本对URI默认编码是<code>ISO-8859-1</code>，这种编码方式以单个字节作为一个字符，而汉字是以两个字节表示一个字符的。<strong>Tomcat8</strong>及其以上版本对URI默认编码是<code>UTF-8</code>，所以get请求和post请求解决中文乱码文题的方法有所不同。</p><h2 id="get请求参数中文乱码解决办法"><a href="#get请求参数中文乱码解决办法" class="headerlink" title="get请求参数中文乱码解决办法"></a>get请求参数中文乱码解决办法</h2><p><strong>如果是Tomcat8及其以上版本，无需解决get请求中文乱码问题</strong></p><p><strong>Tomcat7及其以下版本解决get请求中文乱码有两种方法</strong></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>  修改tomcat默认的编码方式为”UTF-8”<br>在tomcat根目录下的<code>conf/server.xml</code>里把</p><pre><code>&lt;Connector connectionTimeout=&quot;50000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code></pre><p>修改为</p><pre><code>&lt;Connector connectionTimeout=&quot;50000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/&gt;</code></pre><p><strong>注意：</strong>使用这种方式带来的问题是在你本机上这么做没有问题，你无论怎么去修改你tomcat上的配置都没问题，但是测试环境和生产环境的服务器不是轻易说改就能改的，特别是有些公司的服务器是租赁的，那么在我们不知道测试环境和生产环境服务器配置的时候就要使用下面的方法来解决get请求的中文乱码问题。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>因为get请求的参数在请求行上,<strong>Tomcat7</strong>及其以下版本对URI默认编码是ISO-8859-1。所以只能分别对请求行的汉字进行编码和解码。<strong>其实解决get请求中文乱码问题最好的方式是避免使用中文</strong>。</p><pre><code>// name为请求行中的请求参数String name = request.getParameter(&quot;name&quot;);// 先解码后编码name = new String(name.getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);</code></pre><h2 id="post请求参数中文乱码解决办法"><a href="#post请求参数中文乱码解决办法" class="headerlink" title="post请求参数中文乱码解决办法"></a>post请求参数中文乱码解决办法</h2><p>对于post请求，参数在请求体中</p><p>如果是在<code>servlet</code>中，在获取参数前添加上下面这条语句即可</p><pre><code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code></pre><p>如果使用<code>spring</code>进行开发，在<code>web.xml</code>中添加解决乱码过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;description&gt;字符集过滤器&lt;/description&gt;</span><br><span class="line">&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">　　　　　&lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">　　　　　&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">　　　　　&lt;<span class="title">description</span>&gt;字符集编码&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line"><span class="class">　　　　　&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">UTF</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">　　　　　&lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">encodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">// 对所有资源进行过滤，解决<span class="title">post</span>请求中文乱码</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器解决get和post请求参数中文乱码"><a href="#过滤器解决get和post请求参数中文乱码" class="headerlink" title="过滤器解决get和post请求参数中文乱码"></a>过滤器解决get和post请求参数中文乱码</h2><p>使用<code>servlet</code>开发，如果使用上面的方法,每个<code>servlet</code>中都要进行设置编码，如果是post请求还好，但是如果是get请求,每个请求参数都要要手动进行转码，相当麻烦。</p><p> 平常在servlet中接受请求的数据时可以使用<code>request.getParameter(name)</code>或者<code>request.getParameterValues(name)</code>进行获取，但这些方法如果不进行编码设置时，得到的数据都是乱码，这是因为浏览器传过来的数据的编码格式是iso-8859-1,而我们的开发平台一般都是使用的是utf-8，所以就会出现乱码现象。</p><p>这时也就是说<code>request.getParameter(name)</code>这些方法满足不了我们当前的需求，此时我们可以利用装饰者设计模式对这些方法进行增强。</p><p>而为了方便程序员对<code>HttpServletRequest</code>进行包装，javaEE中就已经提供好了一个基类<code>HttpServletRequestWrapper</code>这个类中已经实现其他需要实现的接口，我们只需要编写一个自己的类例如<code>MyRequest</code>继承它，需要增强哪个方法，就对哪个方法进行重写就行,没有重写的方法原来是如何执行的现在还会如何执行。</p><p><strong>解决方法：</strong>使用过滤器对所有请求进行过滤，对请求中的<strong>request</strong>对象使用装饰者模式进行增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">HttpServletRequest request=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String method = request.getMethod();</span><br><span class="line">String value=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">value = request.getParameter(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"get"</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line"></span><br><span class="line">String method = request.getMethod();</span><br><span class="line">String[] values=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">values = request.getParameterValues(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"get"</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (String str : values) &#123;</span><br><span class="line">values[i++] = <span class="keyword">new</span> String(str.getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>过滤器中的代码实现，需要注意的是，在过滤器中放行传入的request对象，是我们经过增强后的<strong>MyRequest</strong>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">MyRequest myRrequest = <span class="keyword">new</span> MyRequest(request);</span><br><span class="line"></span><br><span class="line">chain.doFilter(myRrequest, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用过滤器后，这样在用<code>servlet</code>接受浏览器传过来的数据时，就不用考虑乱码的问题，过滤器已经帮我们解决了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上得知，<strong>尽量使用Tomcat8及其以上Tomcat服务器进行开发学习</strong>，这样就不用担心get请求参数中文乱码问题，post请求只要写一句<code>request.setCharacterEncoding(&quot;utf-8&quot;);</code>就够了，使用<code>spring</code>框架后也只需要在配置文件中加一个过滤器。</p><hr><p>参考文章地址：</p><ul><li><a href="https://www.cnblogs.com/cdf-opensource-007/p/6337448.html" target="_blank" rel="noopener">详解get请求和post请求参数中文乱码的解决办法</a> </li><li><a href="https://blog.csdn.net/hyn150/article/details/70245494" target="_blank" rel="noopener">过滤器解决get和post方式提交的中文乱码</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;乱码原因&quot;&gt;&lt;a href=&quot;#乱码原因&quot; class=&quot;headerlink&quot; title=&quot;乱码原因&quot;&gt;&lt;/a&gt;乱码原因&lt;/h2&gt;&lt;p&gt;对于国内的程序员来说，在做项目时避免不了的问题是中文乱码问题。&lt;strong&gt;Tomcat7&lt;/strong&gt;及其以下版本对
      
    
    </summary>
    
      <category term="study" scheme="http://blog.xuyinhui.com/categories/study/"/>
    
    
      <category term="java" scheme="http://blog.xuyinhui.com/tags/java/"/>
    
      <category term="tomcat" scheme="http://blog.xuyinhui.com/tags/tomcat/"/>
    
      <category term="服务器" scheme="http://blog.xuyinhui.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>markdown的基本语法</title>
    <link href="http://blog.xuyinhui.com/2018/08/12/first-blog-post/"/>
    <id>http://blog.xuyinhui.com/2018/08/12/first-blog-post/</id>
    <published>2018-08-12T15:55:40.000Z</published>
    <updated>2018-08-19T09:38:42.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这还是我刚接触<code>hexo</code>，很多都不懂，这是我的一次练习文章，掌握基本的<code>markdown</code>语法</p><hr><h2 id="配置文件命名规则和路由地址"><a href="#配置文件命名规则和路由地址" class="headerlink" title="配置文件命名规则和路由地址"></a>配置文件命名规则和路由地址</h2><p>Hexo 默认以标题作为文件名称，可以通过 Hexo 的配置文件 _config.yml 中的 <code>new_post_name</code> 参数来改变默认的文件名称，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new<span class="emphasis">_post_</span>name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><p>当创建博客时，就会以这种格式生成Markdown文件，如这篇博客的文件名就生成 <code>2018-08-12-first-blog-post.md</code>这种形式。其中相关变量说明如下表：</p><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">:title</td><td style="text-align:center">标题（小写， 空格将会被替换为短杠）</td></tr><tr><td style="text-align:center">:year</td><td style="text-align:center">创建的年份，如：2018</td></tr><tr><td style="text-align:center">:month</td><td style="text-align:center">创建的月份（有前导零），如：01</td></tr><tr><td style="text-align:center">:i_month</td><td style="text-align:center">创建的月份（无前导零），如：1</td></tr><tr><td style="text-align:center">:day</td><td style="text-align:center">创建的日期（有前导零），如：09</td></tr><tr><td style="text-align:center">:i_day</td><td style="text-align:center">创建的月份（无前导零），如：9</td></tr></tbody></table><p>配置浏览器地址栏中的URL。同样在 Hexo 的配置文件<code>_config.yml</code>中, 配置 <code>permalink</code>属性 ，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: /blog/:year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>当在地址栏访问时，就会如下方式呈现出来：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xu-yh.github.io/2018/08/12/first-blog-post/</span><br></pre></td></tr></table></figure><h2 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h2><p>在命令行中用如下命令创建一篇新的文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">布局（layout）</th><th style="text-align:center">存储路径</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">post</td><td style="text-align:center">source/_posts</td><td style="text-align:center">默认，可以直接发布</td></tr><tr><td style="text-align:center">page</td><td style="text-align:center">source</td><td style="text-align:center">在source下新建一个文件夹</td></tr><tr><td style="text-align:center">draft</td><td style="text-align:center">source/_drafts</td><td style="text-align:center">新建文件将保持到_drafts中</td></tr></tbody></table><p>可以用 <code>publish</code>命令将草稿移动到 <code>source/_posts</code>文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="编写内容"><a href="#编写内容" class="headerlink" title="编写内容"></a>编写内容</h2><p>打开<code>source/_posts</code> 文件夹下刚创建的 Markdown 文件，如：<code>/source/_posts/first-blog-post</code>你会发现有如下内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: first-blog-post</span><br><span class="line">date: 2018-08-12 21:06:50</span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，这里的<code>title</code>是可以随便改的，当然了 <code>date</code>也是可以改，不过没有改的必要；这里要说一下 <code>tags</code>这个属性，如果需要配置多个有两种方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [tag1, tag2, tag3]</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">  - tag3</span><br></pre></td></tr></table></figure><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题分为五级，依次字号变小</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>无序列表项1</span><br><span class="line"><span class="bullet">+ </span>无序列表项2</span><br><span class="line"><span class="bullet">- </span>无序列表项3</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><ul><li>无序列表项1</li></ul><ul><li>无序列表项2</li></ul><ul><li>无序列表项3</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.有序列表项1</span><br><span class="line">2.有序列表项2</span><br><span class="line">3.有序列表项3</span><br></pre></td></tr></table></figure><p><strong>效果：</strong><br>1.有序列表项1<br>2.有序列表项2<br>3.有序列表项3</p><h3 id="斜体与粗体"><a href="#斜体与粗体" class="headerlink" title="斜体与粗体"></a>斜体与粗体</h3><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这是斜体*</span> 或 <span class="emphasis">_这也是斜体_</span> </span><br><span class="line"><span class="strong">**这是粗体**</span></span><br><span class="line"><span class="strong">***这是加粗斜体**</span>*</span><br><span class="line">~~这是删除线~~</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行内形式：[<span class="string">我的博客</span>](<span class="link">https://xu-yh.github.io/</span>)</span><br><span class="line">参考形式：[<span class="string">我的博客</span>][<span class="symbol">1</span>]，[<span class="string">我的github</span>][<span class="symbol">2</span>]</span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">https://xu-yh.github.io/</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">https://github.com/XU-YH</span></span><br><span class="line">自动链接：我的博客地址&lt;https://xu-yh.github.io/&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p>行内形式：<a href="https://xu-yh.github.io/" target="_blank" rel="noopener">我的博客</a><br>参考形式：[我的博客][1]，[我的github][2]<br>[1]:<a href="https://xu-yh.github.io/" target="_blank" rel="noopener">https://xu-yh.github.io/</a><br>[2]:<a href="https://github.com/XU-YH" target="_blank" rel="noopener">https://github.com/XU-YH</a><br>自动链接：我的博客地址<a href="https://xu-yh.github.io/" target="_blank" rel="noopener">https://xu-yh.github.io/</a></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 表头1| 表头2| 表头3| 表头4</span><br><span class="line">| -| :- | :-: | -: |</span><br><span class="line">| 默认左对齐| 左对齐| 居中对其| 右对齐|</span><br><span class="line">| 默认左对齐| 左对齐| 居中对其| 右对齐|</span><br><span class="line">| 默认左对齐| 左对齐| 居中对其| 右对齐|</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><table><thead><tr><th>表头1</th><th style="text-align:left">表头2</th><th style="text-align:center">表头3</th><th style="text-align:right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr><tr><td>默认左对齐</td><td style="text-align:left">左对齐</td><td style="text-align:center">居中对其</td><td style="text-align:right">右对齐</td></tr></tbody></table><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](/images/insert_image.jpg)</span><br><span class="line">这里的地址可以使本地地址，也可以是图片网址</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/favicon.ico" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是引用</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p>这是引用</p></blockquote><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p><strong>写法：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line">三个-或*</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><hr><hr><p><strong><span style="display: inline-block; width: 100%; text-align: center;">需要注意的是：标记与内容之间必须空一行隔开</span></strong></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>这篇文章写了有两个多小时了，结果是值得的，从网上摘抄过来的知识，自己整理出来，收获很多，掌握了markdown的基本语法，下次写文章会轻松很多吧！</li></ul><ul><li>第一次写文章有什么错误和意见希望在下方留言告诉我，大佬教教我。</li></ul><hr><p>参考文章地址：</p><ul><li><a href="https://www.jianshu.com/p/56d99a3049a5" target="_blank" rel="noopener">如何写一篇hexo博客</a> </li><li><a href="https://www.jianshu.com/p/3c7ddd48bfa9" target="_blank" rel="noopener">用Hexo写出第一篇博客</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这还是我刚接触&lt;code&gt;hexo&lt;/code&gt;，很多都不懂，这是我的一次练习文章，掌握基本的&lt;code&gt;markdown&lt;/code&gt;语法
      
    
    </summary>
    
      <category term="study" scheme="http://blog.xuyinhui.com/categories/study/"/>
    
    
      <category term="markdown" scheme="http://blog.xuyinhui.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.xuyinhui.com/2018/08/11/hello-world/"/>
    <id>http://blog.xuyinhui.com/2018/08/11/hello-world/</id>
    <published>2018-08-11T05:41:47.465Z</published>
    <updated>2018-08-11T05:41:47.465Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
